#include <bitset>
#include <cstdint>
#include <iostream>
#include <regex>
#include <sstream>
#include <string>

#include "board_formats.h"

#define NUM_BOARD_AND_PIECES_CHOICES 8

static const int kNumSlots[NUM_BOARD_AND_PIECES_CHOICES] = {
    16, 16, 17, 24, 24, 24, 24, 25,
};

static const uint64_t kBoardMasks[NUM_BOARD_AND_PIECES_CHOICES] = {
    0b00000000'00000000'00000000'00010101'00001110'00011011'00001110'00010101,
    0b00000000'00000000'00000000'00010101'00001110'00011011'00001110'00010101,
    0b00000000'00000000'00000000'00010101'00001110'00011111'00001110'00010101,
    0b00000000'01001001'00101010'00011100'01110111'00011100'00101010'01001001,
    0b00000000'01001001'00101010'00011100'01110111'00011100'00101010'01001001,
    0b00000000'01001001'00101010'00011100'01110111'00011100'00101010'01001001,
    0b00000000'01001001'00101010'00011100'01110111'00011100'00101010'01001001,
    0b00000000'01001001'00101010'00011100'01111111'00011100'00101010'01001001,
};

static const uint64_t kInnerRingMasks[NUM_BOARD_AND_PIECES_CHOICES] = {
    0b00000000'00000000'00000000'00000000'00001110'00001010'00001110'00000000,
    0b00000000'00000000'00000000'00000000'00001110'00001010'00001110'00000000,
    0,
    0b00000000'00000000'00000000'00011100'00010100'00011100'00000000'00000000,
    0b00000000'00000000'00000000'00011100'00010100'00011100'00000000'00000000,
    0b00000000'00000000'00000000'00011100'00010100'00011100'00000000'00000000,
    0b00000000'00000000'00000000'00011100'00010100'00011100'00000000'00000000,
    0,
};

static const uint64_t kOuterRingMasks[NUM_BOARD_AND_PIECES_CHOICES] = {
    0b00000000'00000000'00000000'00010101'00000000'00010001'00000000'00010101,
    0b00000000'00000000'00000000'00010101'00000000'00010001'00000000'00010101,
    0,
    0b00000000'01001001'00000000'00000000'01000001'00000000'00000000'01001001,
    0b00000000'01001001'00000000'00000000'01000001'00000000'00000000'01001001,
    0b00000000'01001001'00000000'00000000'01000001'00000000'00000000'01001001,
    0b00000000'01001001'00000000'00000000'01000001'00000000'00000000'01001001,
    0,
};

static uint64_t kDestMasks[NUM_BOARD_AND_PIECES_CHOICES][56];

static int adjacent16[16][5] = {
    {1, 6, -1, -1, 2},  {0, 2, 4, -1, 3},   {1, 9, -1, -1, 2},
    {4, 7, -1, -1, 2},  {1, 3, 5, -1, 3},   {4, 8, -1, -1, 2},
    {0, 7, 13, -1, 3},  {3, 6, 10, -1, 3},  {5, 9, 12, -1, 3},
    {2, 8, 15, -1, 3},  {7, 11, -1, -1, 2}, {10, 12, 14, -1, 3},
    {8, 11, -1, -1, 2}, {6, 14, -1, -1, 2}, {11, 13, 15, -1, 3},
    {9, 14, -1, -1, 2}};

static int adjacent17[17][5] = {
    {1, 6, -1, -1, 2},   {0, 2, 4, -1, 3},   {1, 10, -1, -1, 2},
    {4, 7, -1, -1, 2},   {1, 3, 5, 8, 4},    {4, 9, -1, -1, 2},
    {0, 7, 14, -1, 3},   {3, 6, 8, 11, 4},   {4, 7, 9, 12, 4},
    {5, 8, 10, 13, 4},   {2, 9, 16, -1, 3},  {7, 12, -1, -1, 2},
    {8, 11, 13, 15, 4},  {9, 12, -1, -1, 2}, {6, 15, -1, -1, 2},
    {12, 14, 16, -1, 3}, {10, 15, -1, -1, 2}};

static int adjacent24[24][5] = {
    {1, 9, -1, -1, 2},   {0, 2, 4, -1, 3},    {1, 14, -1, -1, 2},
    {4, 10, -1, -1, 2},  {1, 3, 5, 7, 4},     {4, 13, -1, -1, 2},
    {7, 11, -1, -1, 2},  {4, 6, 8, -1, 3},    {7, 12, -1, -1, 2},
    {0, 10, 21, -1, 3},  {3, 9, 11, 18, 4},   {6, 10, 15, -1, 3},
    {8, 13, 17, -1, 3},  {5, 12, 14, 20, 4},  {2, 13, 23, -1, 3},
    {11, 16, -1, -1, 2}, {15, 17, 19, -1, 3}, {12, 16, -1, -1, 2},
    {10, 19, -1, -1, 2}, {16, 18, 20, 22, 4}, {13, 19, -1, -1, 2},
    {9, 22, -1, -1, 2},  {19, 21, 23, -1, 3}, {14, 22, -1, -1, 2}};

static int adjacent24Plus[24][5] = {
    {1, 3, 9, -1, 3},    {0, 2, 4, -1, 3},    {1, 5, 14, -1, 3},
    {0, 4, 6, 10, 4},    {1, 3, 5, 7, 4},     {2, 4, 8, 13, 4},
    {3, 7, 11, -1, 3},   {4, 6, 8, -1, 3},    {5, 7, 12, -1, 3},
    {0, 10, 21, -1, 3},  {3, 9, 11, 18, 4},   {6, 10, 15, -1, 3},
    {8, 13, 17, -1, 3},  {5, 12, 14, 20, 4},  {2, 13, 23, -1, 3},
    {11, 16, 18, -1, 3}, {15, 17, 19, -1, 3}, {12, 16, 20, -1, 3},
    {10, 15, 19, 21, 4}, {16, 18, 20, 22, 4}, {13, 17, 19, 23, 4},
    {9, 18, 22, -1, 3},  {19, 21, 23, -1, 3}, {14, 20, 22, -1, 3}};

static int adjacent25[25][5] = {
    {1, 3, 9, -1, 3},    {0, 2, 4, -1, 3},    {1, 5, 15, -1, 3},
    {0, 4, 10, -1, 3},   {1, 3, 5, 7, 4},     {2, 4, 14, -1, 3},
    {7, 11, -1, -1, 2},  {4, 6, 8, 12, 4},    {7, 13, -1, -1, 2},
    {0, 10, 22, -1, 3},  {3, 9, 11, 19, 4},   {6, 10, 12, 16, 4},
    {7, 11, 13, 17, 4},  {8, 12, 14, 18, 4},  {5, 13, 15, 21, 4},
    {2, 14, 24, -1, 3},  {11, 17, -1, -1, 2}, {12, 16, 18, 20, 4},
    {13, 17, -1, -1, 2}, {10, 20, 22, -1, 3}, {17, 19, 21, 23, 4},
    {14, 20, 24, -1, 3}, {9, 19, 23, -1, 3},  {20, 22, 24, -1, 3},
    {15, 21, 23, -1, 3}};

static int kGridIdxToBoardIdx[NUM_BOARD_AND_PIECES_CHOICES][64];

static const int kBoardIdxToGridIdx[NUM_BOARD_AND_PIECES_CHOICES][25] = {
    {0, 2, 4, 9, 10, 11, 16, 17, 19, 20, 25, 26, 27, 32, 34, 36},
    {0, 2, 4, 9, 10, 11, 16, 17, 19, 20, 25, 26, 27, 32, 34, 36},
    {0, 2, 4, 9, 10, 11, 16, 17, 18, 19, 20, 25, 26, 27, 32, 34, 36},
    {0,  3,  6,  9,  11, 13, 18, 19, 20, 24, 25, 26,
     28, 29, 30, 34, 35, 36, 41, 43, 45, 48, 51, 54},
    {0,  3,  6,  9,  11, 13, 18, 19, 20, 24, 25, 26,
     28, 29, 30, 34, 35, 36, 41, 43, 45, 48, 51, 54},
    {0,  3,  6,  9,  11, 13, 18, 19, 20, 24, 25, 26,
     28, 29, 30, 34, 35, 36, 41, 43, 45, 48, 51, 54},
    {0,  3,  6,  9,  11, 13, 18, 19, 20, 24, 25, 26,
     28, 29, 30, 34, 35, 36, 41, 43, 45, 48, 51, 54},
    {0,  3,  6,  9,  11, 13, 18, 19, 20, 24, 25, 26, 27,
     28, 29, 30, 34, 35, 36, 41, 43, 45, 48, 51, 54},
};

void PrintMask(uint64_t mask, int board_id, const char *format) {
    std::string s(format);
    for (int i = 0; i < kNumSlots[board_id]; ++i) {
        s.replace(s.find("%c"), 2, ((mask >> kBoardIdxToGridIdx[board_id][i]) & 1ULL) ? "X" : " ");
    }
    std::cout << s;
}

void SetDestFromAdjMat(int adj[][5], int board_id, int size) {
    for (int i = 0; i < size; ++i) {
        uint64_t *mask = &kDestMasks[board_id][kBoardIdxToGridIdx[board_id][i]];
        for (int j = 0; j < adj[i][4]; ++j) {
            *mask |= (1ULL << kBoardIdxToGridIdx[board_id][adj[i][j]]);
        }
    }
}

int main(void) {
    for (int i = 0; i < NUM_BOARD_AND_PIECES_CHOICES; ++i) {
        for (int j = 0; j < kNumSlots[i]; ++j) {
            kGridIdxToBoardIdx[i][kBoardIdxToGridIdx[i][j]] = j;
        }
    }

    SetDestFromAdjMat(adjacent16, 0, 16);
    int j = 0;
    for (int i = 0; i < 56; ++i) {
        if (!kDestMasks[0][i]) continue;
        std::cout << "grid index: " << i << ", board index: " << j++ << "\n";
        PrintMask(kDestMasks[0][i], 0, kFormat16BoardOnly);
    }
    return 0;
}
