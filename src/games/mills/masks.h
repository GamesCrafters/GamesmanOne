#ifndef GAMESMANONE_GAMES_MILLS_MASKS_H_
#define GAMESMANONE_GAMES_MILLS_MASKS_H_

#include <stdint.h>  // int8_t, uint64_t

#include "games/mills/variants.h"

/**
 * @brief Number of slots on each board variant. kNumSlots[i] gives the number
 * of slots on board with index i.
 */
static const int8_t kNumSlots[NUM_BOARD_AND_PIECES_CHOICES] = {
    16, 16, 17, 24, 24, 24, 24, 25,
};

/**
 * @brief Masks with set bits corresponding to slots on each board variant.
 * kBoardMasks[i] gives the mask for board with index i.
 */
static const uint64_t kBoardMasks[NUM_BOARD_AND_PIECES_CHOICES] = {
    0x150e1b0e15,     0x150e1b0e15,     0x150e1f0e15,     0x492a1c771c2a49,
    0x492a1c771c2a49, 0x492a1c771c2a49, 0x492a1c771c2a49, 0x492a1c7f1c2a49,
};

static const int8_t kPaddedSideLengths[NUM_BOARD_AND_PIECES_CHOICES] = {
    5, 5, 5, 7, 7, 7, 7, 7,
};

/**
 * @brief Masks with set bits corresponding to slots on the inner ring of each
 * board variant if it has a ring symmetry; otherwise the mask contains all
 * zeros for that board variant. kInnerRingMasks[i] gives the mask for board
 * with index i.
 */
static const uint64_t kInnerRingMasks[NUM_BOARD_AND_PIECES_CHOICES] = {
    0xe0a0e00,    0xe0a0e00,    0x0,          0x1c141c0000,
    0x1c141c0000, 0x1c141c0000, 0x1c141c0000, 0x0,
};

/**
 * @brief Masks with set bits corresponding to slots on the outer ring of each
 * board variant if it has a ring symmetry; otherwise the mask contains all
 * zeros for that board variant. kInnerRingMasks[i] gives the mask for board
 * with index i.
 */
static const uint64_t kOuterRingMasks[NUM_BOARD_AND_PIECES_CHOICES] = {
    0x1500110015,     0x1500110015,     0x0, 0x49000041000049, 0x49000041000049,
    0x49000041000049, 0x49000041000049, 0x0,
};

/**
 * @brief Masks with set bits corresponding to slots that are adjacent to the
 * current slot on the 16 board. kDestMasks16[i] gives the mask for the slot
 * that maps to the i-th least significant bit on the 8x8 bit board.
 */
static const uint64_t kDestMasks16[] = {
    0x10004,     0x0,       0x411,        0x0,       0x100004,     0x0,
    0x0,         0x0,       0x0,          0x20400,   0xa04,        0x80400,
    0x0,         0x0,       0x0,          0x0,       0x100020001,  0x2010200,
    0x0,         0x8100800, 0x1000080010, 0x0,       0x0,          0x0,
    0x0,         0x4020000, 0x40a000000,  0x4080000, 0x0,          0x0,
    0x0,         0x0,       0x400010000,  0x0,       0x1104000000, 0x0,
    0x400100000,
};

/**
 * @brief Masks with set bits corresponding to slots that are adjacent to the
 * current slot on the 17 board. kDestMasks17[i] gives the mask for the slot
 * that maps to the i-th least significant bit on the 8x8 bit board.
 */
static const uint64_t kDestMasks17[] = {
    0x10004,     0x0,       0x411,        0x0,       0x100004,     0x0,
    0x0,         0x0,       0x0,          0x20400,   0x40a04,      0x80400,
    0x0,         0x0,       0x0,          0x0,       0x100020001,  0x2050200,
    0x40a0400,   0x8140800, 0x1000080010, 0x0,       0x0,          0x0,
    0x0,         0x4020000, 0x40a040000,  0x4080000, 0x0,          0x0,
    0x0,         0x0,       0x400010000,  0x0,       0x1104000000, 0x0,
    0x400100000,
};

/**
 * @brief Masks with set bits corresponding to slots that are adjacent to the
 * current slot on the 24 board. kDestMasks24[i] gives the mask for the slot
 * that maps to the i-th least significant bit on the 8x8 bit board.
 */
static const uint64_t kDestMasks24[] = {
    0x1000008,
    0x0,
    0x0,
    0x841,
    0x0,
    0x0,
    0x40000008,
    0x0,
    0x0,
    0x2000800,
    0x0,
    0x82208,
    0x0,
    0x20000800,
    0x0,
    0x0,
    0x0,
    0x0,
    0x4080000,
    0x140800,
    0x10080000,
    0x0,
    0x0,
    0x0,
    0x1000002000001,
    0x20005000200,
    0x402040000,
    0x0,
    0x1020100000,
    0x200050002000,
    0x40000020000040,
    0x0,
    0x0,
    0x0,
    0x804000000,
    0x81400000000,
    0x810000000,
    0x0,
    0x0,
    0x0,
    0x0,
    0x80002000000,
    0x0,
    0x8220800000000,
    0x0,
    0x80020000000,
    0x0,
    0x0,
    0x8000001000000,
    0x0,
    0x0,
    0x41080000000000,
    0x0,
    0x0,
    0x8000040000000,
};

/**
 * @brief Masks with set bits corresponding to slots that are adjacent to the
 * current slot on the 24 board with diagonals. kDestMasks24Plus[i] gives the
 * mask for the slot that maps to the i-th least significant bit on the 8x8 bit
 * board.
 */
static const uint64_t kDestMasks24Plus[] = {
    0x1000208,
    0x0,
    0x0,
    0x841,
    0x0,
    0x0,
    0x40002008,
    0x0,
    0x0,
    0x2040801,
    0x0,
    0x82208,
    0x0,
    0x20100840,
    0x0,
    0x0,
    0x0,
    0x0,
    0x4080200,
    0x140800,
    0x10082000,
    0x0,
    0x0,
    0x0,
    0x1000002000001,
    0x20005000200,
    0x402040000,
    0x0,
    0x1020100000,
    0x200050002000,
    0x40000020000040,
    0x0,
    0x0,
    0x0,
    0x20804000000,
    0x81400000000,
    0x200810000000,
    0x0,
    0x0,
    0x0,
    0x0,
    0x1080402000000,
    0x0,
    0x8220800000000,
    0x0,
    0x40081020000000,
    0x0,
    0x0,
    0x8020001000000,
    0x0,
    0x0,
    0x41080000000000,
    0x0,
    0x0,
    0x8200040000000,
};

/**
 * @brief Masks with set bits corresponding to slots that are adjacent to the
 * current slot on the 25 board. kDestMasks25[i] gives the mask for the slot
 * that maps to the i-th least significant bit on the 8x8 bit board.
 */
static const uint64_t kDestMasks25[] = {
    0x1000208,
    0x0,
    0x0,
    0x841,
    0x0,
    0x0,
    0x40002008,
    0x0,
    0x0,
    0x2000801,
    0x0,
    0x82208,
    0x0,
    0x20000840,
    0x0,
    0x0,
    0x0,
    0x0,
    0x4080000,
    0x8140800,
    0x10080000,
    0x0,
    0x0,
    0x0,
    0x1000002000001,
    0x20005000200,
    0x40a040000,
    0x814080000,
    0x1028100000,
    0x200050002000,
    0x40000020000040,
    0x0,
    0x0,
    0x0,
    0x804000000,
    0x81408000000,
    0x810000000,
    0x0,
    0x0,
    0x0,
    0x0,
    0x1080002000000,
    0x0,
    0x8220800000000,
    0x0,
    0x40080020000000,
    0x0,
    0x0,
    0x8020001000000,
    0x0,
    0x0,
    0x41080000000000,
    0x0,
    0x0,
    0x8200040000000,
};

/**
 * @brief Masks with set bits corresponding to slots that are adjacent to the
 * each slot on each board variant. kDestMasks[board_id][i] gives the mask for
 * the slot that maps to the i-th least significant bit on the board with index
 * equal to board_id.
 */
static const uint64_t *kDestMasks[NUM_BOARD_AND_PIECES_CHOICES] = {
    kDestMasks16, kDestMasks16,     kDestMasks17,     kDestMasks24,
    kDestMasks24, kDestMasks24Plus, kDestMasks24Plus, kDestMasks25,
};

/**
 * @brief Number of 3-in-a-rows on each board variant.
 */
static const int8_t kNumLines[NUM_BOARD_AND_PIECES_CHOICES] = {
    8, 8, 14, 16, 16, 20, 20, 22,
};

/**
 * @brief Masks with set bits corresponding to slots that form a 3-in-a-row
 * on the 16 board. kLineMasks16[i] gives the mask for the i-th line.
 */
static const uint64_t kLineMasks16[] = {
    0x15,  0x1000100010, 0x1500000000, 0x100010001,
    0xe00, 0x8080800,    0xe000000,    0x2020200,
};

/**
 * @brief Masks with set bits corresponding to slots that form a 3-in-a-row
 * on the 17 board. kLineMasks17[i] gives the mask for the i-th line.
 */
static const uint64_t kLineMasks17[] = {
    0x15,        0x1000100010, 0x1500000000, 0x100010001, 0xe00,
    0x8080800,   0xe000000,    0x2020200,    0x40404,     0x4040400,
    0x404040000, 0x70000,      0xe0000,      0x1c0000,
};

/**
 * @brief Masks with set bits corresponding to slots that form a 3-in-a-row
 * on the 24 board. kLineMasks24[i] gives the mask for the i-th line.
 */
static const uint64_t kLineMasks24[] = {
    0x49,     0x40000040000040, 0x49000000000000, 0x1000001000001,
    0x2a00,   0x200020002000,   0x2a0000000000,   0x20002000200,
    0x1c0000, 0x1010100000,     0x1c00000000,     0x404040000,
    0x80808,  0x70000000,       0x8080800000000,  0x7000000,
};

/**
 * @brief Masks with set bits corresponding to slots that form a 3-in-a-row
 * on the 24 board with diagonals. kLineMasks24Plus[i] gives the mask for the
 * i-th line.
 */
static const uint64_t kLineMasks24Plus[] = {
    0x49,     0x40000040000040, 0x49000000000000, 0x1000001000001,
    0x2a00,   0x200020002000,   0x2a0000000000,   0x20002000200,
    0x1c0000, 0x1010100000,     0x1c00000000,     0x404040000,
    0x80808,  0x70000000,       0x8080800000000,  0x7000000,
    0x40201,  0x102040,         0x40201000000000, 0x1020400000000,
};

/**
 * @brief Masks with set bits corresponding to slots that form a 3-in-a-row
 * on the 25 board. kLineMasks25[i] gives the mask for the i-th line.
 */
static const uint64_t kLineMasks25[] = {
    0x49,
    0x40000040000040,
    0x49000000000000,
    0x1000001000001,
    0x2a00,
    0x200020002000,
    0x2a0000000000,
    0x20002000200,
    0x1c0000,
    0x1010100000,
    0x1c00000000,
    0x404040000,
    0x80808,
    0x8080800,
    0x808080000,
    0x80808000000,
    0x8080800000000,
    0x7000000,
    0xe000000,
    0x1c000000,
    0x38000000,
    0x70000000,
};

/**
 * @brief Masks with set bits corresponding to 3-in-a-rows on each board
 * variant. kLineMasks[board_id][i] gives the mask for the i-th line on the
 * board with index equal to board_id.
 */
static const uint64_t *kLineMasks[NUM_BOARD_AND_PIECES_CHOICES] = {
    kLineMasks16, kLineMasks16,     kLineMasks17,     kLineMasks24,
    kLineMasks24, kLineMasks24Plus, kLineMasks24Plus, kLineMasks25,
};

static const int8_t kNumParticipatingLines16[] = {
    2, 0, 1, 0, 2, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 1, 1, 0,
    1, 1, 0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 2, 0, 1, 0, 2,
};

static const int8_t kNumParticipatingLines17[] = {
    2, 0, 2, 0, 2, 0, 0, 0, 0, 2, 3, 2, 0, 0, 0, 0, 2, 3, 6,
    3, 2, 0, 0, 0, 0, 2, 3, 2, 0, 0, 0, 0, 2, 0, 2, 0, 2,
};

static const int8_t kNumParticipatingLines24[] = {
    2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 2,
    2, 2, 0, 0, 0, 2, 2, 2, 0, 2, 2, 2, 0, 0, 0, 2, 2, 2, 0,
    0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2,
};

static const int8_t kNumParticipatingLines24Plus[] = {
    3, 0, 0, 2, 0, 0, 3, 0, 0, 3, 0, 2, 0, 3, 0, 0, 0, 0, 3,
    2, 3, 0, 0, 0, 2, 2, 2, 0, 2, 2, 2, 0, 0, 0, 3, 2, 3, 0,
    0, 0, 0, 3, 0, 2, 0, 3, 0, 0, 3, 0, 0, 2, 0, 0, 3,
};

static const int8_t kNumParticipatingLines25[] = {
    2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 3, 0, 2, 0, 0, 0, 0, 2,
    4, 2, 0, 0, 0, 2, 3, 4, 6, 4, 3, 2, 0, 0, 0, 2, 4, 2, 0,
    0, 0, 0, 2, 0, 3, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2,
};

// clang-format off

static const uint64_t kParticipatingLines16[][6] = {
    { 0x14, 0x100010000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x11, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x5, 0x1000100000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0xc00, 0x2020000, 0x0, 0x0, 0x0, 0x0, },
    { 0xa00, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x600, 0x8080000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x100000001, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x2000200, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x8000800, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x1000000010, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x20200, 0xc000000, 0x0, 0x0, 0x0, 0x0, },
    { 0xa000000, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x80800, 0x6000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x10001, 0x1400000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x1100000000, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x100010, 0x500000000, 0x0, 0x0, 0x0, 0x0, },
};

static const uint64_t kParticipatingLines17[][6] = {
    { 0x14, 0x100010000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x11, 0x40400, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x5, 0x1000100000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0xc00, 0x2020000, 0x0, 0x0, 0x0, 0x0, },
    { 0xa00, 0x40004, 0x4040000, 0x0, 0x0, 0x0, },
    { 0x600, 0x8080000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x100000001, 0x60000, 0x0, 0x0, 0x0, 0x0, },
    { 0x2000200, 0x50000, 0xc0000, 0x0, 0x0, 0x0, },
    { 0x404, 0x4000400, 0x404000000, 0x30000, 0xa0000, 0x180000, },
    { 0x8000800, 0x60000, 0x140000, 0x0, 0x0, 0x0, },
    { 0x1000000010, 0xc0000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x20200, 0xc000000, 0x0, 0x0, 0x0, 0x0, },
    { 0xa000000, 0x40400, 0x400040000, 0x0, 0x0, 0x0, },
    { 0x80800, 0x6000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x10001, 0x1400000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x1100000000, 0x4040000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x100010, 0x500000000, 0x0, 0x0, 0x0, 0x0, },
};

static const uint64_t kParticipatingLines24[][6] = {
    { 0x48, 0x1000001000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x41, 0x80800, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x9, 0x40000040000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x2800, 0x20002000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x80008, 0x2200, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0xa00, 0x200020000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x180000, 0x404000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x808, 0x140000, 0x0, 0x0, 0x0, 0x0, },
    { 0xc0000, 0x1010000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x1000000000001, 0x6000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x20000000200, 0x5000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x400040000, 0x3000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x1000100000, 0x60000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x200000002000, 0x50000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x40000000000040, 0x30000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x4040000, 0x1800000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x1400000000, 0x8080000000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x10100000, 0xc00000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x2000200, 0x280000000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x8000800000000, 0x220000000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x20002000, 0xa0000000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x1000001, 0x48000000000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x80800000000, 0x41000000000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x40000040, 0x9000000000000, 0x0, 0x0, 0x0, 0x0, },
};

static const uint64_t kParticipatingLines24Plus[][6] = {
    { 0x48, 0x1000001000000, 0x40200, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x41, 0x80800, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x9, 0x40000040000000, 0x102000, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x2800, 0x20002000000, 0x40001, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x80008, 0x2200, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0xa00, 0x200020000000, 0x100040, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x180000, 0x404000000, 0x201, 0x0, 0x0, 0x0, },
    { 0x808, 0x140000, 0x0, 0x0, 0x0, 0x0, },
    { 0xc0000, 0x1010000000, 0x2040, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x1000000000001, 0x6000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x20000000200, 0x5000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x400040000, 0x3000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x1000100000, 0x60000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x200000002000, 0x50000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x40000000000040, 0x30000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x4040000, 0x1800000000, 0x1020000000000, 0x0, 0x0, 0x0, },
    { 0x1400000000, 0x8080000000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x10100000, 0xc00000000, 0x40200000000000, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x2000200, 0x280000000000, 0x1000400000000, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x8000800000000, 0x220000000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x20002000, 0xa0000000000, 0x40001000000000, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x1000001, 0x48000000000000, 0x20400000000, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x80800000000, 0x41000000000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x40000040, 0x9000000000000, 0x201000000000, 0x0, 0x0, 0x0, },
};

static const uint64_t kParticipatingLines25[][6] = {
    { 0x48, 0x1000001000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x41, 0x80800, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x9, 0x40000040000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x2800, 0x20002000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x80008, 0x8080000, 0x2200, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0xa00, 0x200020000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x180000, 0x404000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x808, 0x8000800, 0x808000000, 0x140000, 0x0, 0x0, },
    { 0xc0000, 0x1010000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x1000000000001, 0x6000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x20000000200, 0x5000000, 0xc000000, 0x0, 0x0, 0x0, },
    { 0x400040000, 0x3000000, 0xa000000, 0x18000000, 0x0, 0x0, },
    { 0x80800, 0x800080000, 0x80800000000, 0x6000000, 0x14000000, 0x30000000, },
    { 0x1000100000, 0xc000000, 0x28000000, 0x60000000, 0x0, 0x0, },
    { 0x200000002000, 0x18000000, 0x50000000, 0x0, 0x0, 0x0, },
    { 0x40000000000040, 0x30000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x4040000, 0x1800000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x1400000000, 0x8080000, 0x80008000000, 0x8080000000000, 0x0, 0x0, },
    { 0x10100000, 0xc00000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x2000200, 0x280000000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x220000000000, 0x808000000, 0x8000800000000, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x20002000, 0xa0000000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x1000001, 0x48000000000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x80800000000, 0x41000000000000, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
    { 0x40000040, 0x9000000000000, 0x0, 0x0, 0x0, 0x0, },
};

// clang-format on

static const uint64_t (
    *kParticipatingLines[NUM_BOARD_AND_PIECES_CHOICES])[6] = {
    kParticipatingLines16,     kParticipatingLines16, kParticipatingLines17,
    kParticipatingLines24,     kParticipatingLines24, kParticipatingLines24Plus,
    kParticipatingLines24Plus, kParticipatingLines25,
};

static const int8_t *kNumParticipatingLines[NUM_BOARD_AND_PIECES_CHOICES] = {
    kNumParticipatingLines16,     kNumParticipatingLines16,
    kNumParticipatingLines17,     kNumParticipatingLines24,
    kNumParticipatingLines24,     kNumParticipatingLines24Plus,
    kNumParticipatingLines24Plus, kNumParticipatingLines25,
};

/**
 * @brief Maps row-major board slot indices to 8x8 bit board indices.
 * kBoardIdxToGridIdx[board_id][i] gives the 8x8 bit board index corresponding
 * to the i-th row-major board slot on the board with index board_id.
 */
static const int8_t kBoardIdxToGridIdx[NUM_BOARD_AND_PIECES_CHOICES][25] = {
    {0, 2, 4, 9, 10, 11, 16, 17, 19, 20, 25, 26, 27, 32, 34, 36},
    {0, 2, 4, 9, 10, 11, 16, 17, 19, 20, 25, 26, 27, 32, 34, 36},
    {0, 2, 4, 9, 10, 11, 16, 17, 18, 19, 20, 25, 26, 27, 32, 34, 36},
    {0,  3,  6,  9,  11, 13, 18, 19, 20, 24, 25, 26,
     28, 29, 30, 34, 35, 36, 41, 43, 45, 48, 51, 54},
    {0,  3,  6,  9,  11, 13, 18, 19, 20, 24, 25, 26,
     28, 29, 30, 34, 35, 36, 41, 43, 45, 48, 51, 54},
    {0,  3,  6,  9,  11, 13, 18, 19, 20, 24, 25, 26,
     28, 29, 30, 34, 35, 36, 41, 43, 45, 48, 51, 54},
    {0,  3,  6,  9,  11, 13, 18, 19, 20, 24, 25, 26,
     28, 29, 30, 34, 35, 36, 41, 43, 45, 48, 51, 54},
    {0,  3,  6,  9,  11, 13, 18, 19, 20, 24, 25, 26, 27,
     28, 29, 30, 34, 35, 36, 41, 43, 45, 48, 51, 54},
};

#endif  // GAMESMANONE_GAMES_MILLS_MASKS_H_
