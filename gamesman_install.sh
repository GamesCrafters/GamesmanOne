#!/bin/bash
# This script was modified from its original version generated by ChatGPT.
# Always run this script from the root project directory.

####################
# Helper Functions #
####################

# Function to print an error and exit
error_exit() {
    echo "Error: $1" 1>&2
    exit 1
}

mkdir_if_not_exist() {
    local dir_name="$1"
    if [ -d "$dir_name" ]; then
        echo "Directory '$dir_name' already exists."
    else
        mkdir "$dir_name" || error_exit "Failed to create directory '$dir_name'."
        echo "Directory '$dir_name' created successfully."
    fi
}

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to install dependencies on Debian/Ubuntu
install_debian() {
    sudo apt update && sudo apt install -y git cmake zlib1g zlib1g-dev
}

# Function to install dependencies on RHEL/CentOS
install_rhel() {
    sudo dnf update && sudo dnf install -y git cmake zlib zlib-devel
}

# Function to install dependencies on MacOS
install_macos() {
    # Assuming Homebrew is installed
    xcode-select --install
    brew install git cmake zlib || error_exit "brew install failed"
}

#########################
# Setup Pre-Commit Hook #
#########################

# Currently having issues with Ubuntu. Disabled for now.
# cp scripts/hooks/pre-commit .git/hooks/pre-commit || error_exit "failed to copy pre-commit hook"
# chmod +x .git/hooks/pre-commit || error_exit "failed to set .git/hooks/pre-commit as executable"

########################
# Install Dependencies #
########################

# Check if running as root, abort if yes.
if [ "$(id -u)" -eq 0 ]; then
    error_exit "Running the script as root is dangerous. Please rerun the script as normal user."
fi

# Detect OS and architecture
OS="$(uname -s)"
ARCH="$(uname -m)"

# Check if --install flag is given
if [ "$1" == "--install" ]; then
    INSTALL_DEPENDENCIES=true
else
    INSTALL_DEPENDENCIES=false
fi

# Install dependencies if requested.
if [ "$INSTALL_DEPENDENCIES" = true ]; then
    case "$OS" in
    Linux*)
        # Detect if using Debian/Ubuntu or RHEL/CentOS
        if [ -f /etc/debian_version ]; then
            install_debian || error_exit "Failed to install dependencies on Debian/Ubuntu."
        elif [ -f /etc/redhat-release ]; then
            install_rhel || error_exit "Failed to install dependencies on RHEL/CentOS."
        else
            error_exit "Unsupported Linux distribution."
        fi
        ;;
    Darwin*)
        install_macos || error_exit "Failed to install dependencies on MacOS."
        ;;
    *)
        error_exit "Unsupported operating system."
        ;;
    esac
else
    echo "Skipping installation of dependencies."
fi

# Check for required commands
command_not_found_msg="Try installing dependencies by running this script with --install"
for cmd in git cmake; do
    command_exists "$cmd" || error_exit "command $cmd not found. $command_not_found_msg"
done

#################
# Library Setup #
#################

# Initialize submodules
git submodule update --init || error_exit "Failed to update git submodules"

# Prepare library build directory
mkdir_if_not_exist "lib-build"
cd lib-build || error_exit "Failed to change directory to lib-build"

# Build json-c
mkdir_if_not_exist "json-c"
cd json-c || error_exit "Failed to change directory to lib-build/json-c"
CMAKE_FLAGS="-DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=../../res -DCMAKE_BUILD_TYPE=Release"
cmake ../../lib/json-c/ $CMAKE_FLAGS || error_exit "CMake failed to configure json-c"
make -j || error_exit "json-c make failed"
make install -j || error_exit "json-c make install failed"
cd ../ || error_exit "Failed to change directory back to lib-build"

# Build xz
mkdir_if_not_exist "xz"
cd xz || error_exit "Failed to change directory to lib-build/xz"
cmake ../../lib/xz/ $CMAKE_FLAGS || error_exit "CMake failed to configure xz"
make -j || error_exit "xz make failed"
make install -j || error_exit "xz make install failed"
cd ../ || error_exit "Failed to change directory back to lib-build"

# Build lz4
mkdir_if_not_exist "lz4"
cd lz4 || error_exit "Failed to change directory to lib-build/lz4"
cmake ../../lib/lz4/build/cmake/ $CMAKE_FLAGS || error_exit "CMake failed to configure lz4"
make -j || error_exit "lz4 make failed"
make install -j || error_exit "lz4 make failed"
cd ../ || error_exit "Failed to change directory back to lib-build"

# Finalize library setup
cd ..

############################
# Build GamesmanOne Binary #
############################

mkdir_if_not_exist "build"
cd build || error_exit "Failed to change directory to build"
cmake -DCMAKE_BUILD_TYPE=Release .. || error_exit "CMake failed to configure GamesmanOne."
cd .. || error_exit "Failed to change directory back to the project root."
cmake --build build -- -j || error_exit "CMake failed to build GamesmanOne."
